local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local root = character:WaitForChild("HumanoidRootPart")

local active = false
local cooldown = false
local moveSpeed = 22
local detectionRadius = 50
local safeDistance = 35
local pathUpdateInterval = 0.5

-- GUI Creation
local ScreenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
ScreenGui.Name = "FarFromYaGui"

local toggle = Instance.new("TextButton")
toggle.Size = UDim2.new(0, 120, 0, 40)
toggle.Position = UDim2.new(0, 10, 0, 10)
toggle.Text = "Far From Ya: OFF"
toggle.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
toggle.Parent = ScreenGui

-- Escape function using Pathfinding
local function getClosestEnemy()
	local closest = nil
	local shortest = math.huge

	for _, plr in ipairs(Players:GetPlayers()) do
		if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
			local dist = (plr.Character.HumanoidRootPart.Position - root.Position).Magnitude
			if dist < shortest then
				shortest = dist
				closest = plr.Character
			end
		end
	end

	-- Check for NPCs
	for _, npc in pairs(workspace:GetDescendants()) do
		if npc:IsA("Model") and npc:FindFirstChild("Humanoid") and npc:FindFirstChild("HumanoidRootPart") then
			local dist = (npc.HumanoidRootPart.Position - root.Position).Magnitude
			if dist < shortest then
				shortest = dist
				closest = npc
			end
		end
	end

	return closest, shortest
end

local function runAwayFrom(target)
	local direction = (root.Position - target.Position).Unit
	local escapePos = root.Position + direction * safeDistance

	local path = PathfindingService:CreatePath({
		AgentRadius = 2,
		AgentHeight = 5,
		AgentCanJump = true,
		AgentCanClimb = true
	})

	path:ComputeAsync(root.Position, escapePos)

	if path.Status == Enum.PathStatus.Complete then
		for _, waypoint in ipairs(path:GetWaypoints()) do
			if not active then break end
			humanoid:MoveTo(waypoint.Position)
			humanoid.WalkSpeed = moveSpeed
			humanoid.MoveToFinished:Wait()
		end
	end
end

-- Main Loop
task.spawn(function()
	while true do
		task.wait(pathUpdateInterval)
		if active and not cooldown then
			local enemy, dist = getClosestEnemy()
			if enemy and dist <= detectionRadius then
				runAwayFrom(enemy.HumanoidRootPart)
			else
				humanoid:MoveTo(root.Position) -- Stop moving
			end
		end
	end
end)

-- Button Toggle
toggle.MouseButton1Click:Connect(function()
	active = not active
	toggle.Text = active and "Far From Ya: ON" or "Far From Ya: OFF"
	toggle.BackgroundColor3 = active and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(40, 40, 40)
end)
